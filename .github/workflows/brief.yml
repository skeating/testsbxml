name: Build and Test

on:
  push:
    branches: [ builds_with_libsbml ]
  pull_request:
    branches: [ builds_with_libsbml ]
  workflow_dispatch:
  
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The matrix build if you need cross-platform coverage.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v2
    
    - name: Clone libSBML
      shell: bash
      run: |
        cmake -E make_directory "${{runner.workspace}}/libsbml"
        git clone https://github.com/sbmlteam/libsbml.git "${{runner.workspace}}/libsbml"
        
    - name: Install libLX Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: sudo apt-get install -y check ccache
    
    - name: Install libLX macOS dependencies
      if: matrix.os == 'macos-latest'
      shell: bash
      run: brew install check swig ccache
      
    - name: Install libLX Windows dependencies
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        curl -L https://sourceforge.net/projects/sbml/files/libsbml/win-dependencies/libSBML_dependencies_vs15_release_x64_static.zip/download > dependencies.zip
        unzip dependencies.zip -d dependencies
        cp -r dependencies/libSBML\ Dependencies-1.0.0-b1-win64/* dependencies
        rm -r dependencies/libSBML*
        mv dependencies "${{runner.workspace}}/libsbml"
        #
        curl -L https://prdownloads.sourceforge.net/swig/swigwin-3.0.12.zip > swig.zip
        unzip -o swig.zip -d swig
        echo "${{runner.workspace}}/swig/swigwin-3.0.12" >> $GITHUB_PATH
    
    - name: Build libSBML
      shell: bash
      run: |
        cmake -B "${{runner.workspace}}/libsbml-build" -S "${{runner.workspace}}/libsbml"
        cmake --build "${{runner.workspace}}/libsbml-build" --config $BUILD_TYPE
        
    - name: Prepare Build Environment for testsbxml on non-Windows OS
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir "${{runner.workspace}}/dependencies"
        mkdir "${{runner.workspace}}/dependencies/include"
        mkdir "${{runner.workspace}}/dependencies/lib"
        cp -r "${{runner.workspace}}/libsbml/src/sbml" "${{runner.workspace}}/dependencies/include"
        cp "${{runner.workspace}}/libsbml-build/src/"*.* "${{runner.workspace}}/dependencies/lib"
        
    - name: Prepare Build Environment for testsbxml on Windows OS
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir "${{runner.workspace}}/dependencies"
        mkdir "${{runner.workspace}}/dependencies/include"
        mkdir "${{runner.workspace}}/dependencies/lib"
        cp -r "${{runner.workspace}}/libsbml/src/sbml" "${{runner.workspace}}/dependencies/include"
        cp "${{runner.workspace}}/libsbml-build/src/Release/"*.* "${{runner.workspace}}/dependencies/lib"
        
    - name: Configure ubuntu CMake
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        cmake -B "${{runner.workspace}}/build" \
          -DLIBLX_INCLUDE_DIR="${{runner.workspace}}/dependencies/include" \
          -DLIBLX_LIBRARY="${{runner.workspace}}/dependencies/lib/libsbml.so" \
          -DWITH_EXAMPLES=True \
          -DWITH_CHECK=True
          
    - name: Configure macOS CMake
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        cmake -B "${{runner.workspace}}/build" \
          -DLIBLX_INCLUDE_DIR="${{runner.workspace}}/dependencies/include" \
          -DLIBLX_LIBRARY="${{runner.workspace}}/dependencies/lib/libsbml.dylib" \
          -DWITH_EXAMPLES=True \
          -DWITH_CHECK=True
          
    - name: Configure Windows CMake
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cmake -B "${{runner.workspace}}/build" \
          -DLIBLX_INCLUDE_DIR="${{runner.workspace}}/dependencies/include" \
          -DLIBLX_LIBRARY="${{runner.workspace}}/dependencies/lib/libsbml.lib" \
          -DWITH_EXAMPLES=True \
          -DWITH_CHECK=True
          
    - name: Build testsbxml
      shell: bash
      run: cmake --build "${{runner.workspace}}/build" --config $BUILD_TYPE

    - name: Test testsbxml
      shell: bash
      run: ctest -V -C $BUILD_TYPE "${{runner.workspace}}/build"
