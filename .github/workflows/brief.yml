name: Build and Test

on:
  push:
    branches: [ builds_with_libsbml ]
  pull_request:
    branches: [ builds_with_libsbml ]
  workflow_dispatch:
  
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The matrix build if you need cross-platform coverage.
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [macos-latest] #, ubuntu-latest] #, windows-latest]
       
    steps:
    - uses: actions/checkout@v2

    - name: Add msbuild to PATH (Windows)
      if: matrix.platform == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1.6.0

    - name: Clone libSBML
      shell: bash
      run: | 
        git clone https://github.com/sbmlteam/libsbml.git "${{runner.workspace}}/libsbml"
        
    - name: Install libSBML Windows dependencies
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
        curl -L https://sourceforge.net/projects/sbml/files/libsbml/win-dependencies/libSBML_dependencies_vs15_release_x64_static.zip/download > dependencies.zip
        unzip dependencies.zip -d dependencies
        cp -r dependencies/libSBML\ Dependencies-1.0.0-b1-win64/* dependencies
        rm -r dependencies/libSBML*
        cp -r dependencies ../libsbml/dependencies
        #
        curl -L https://prdownloads.sourceforge.net/swig/swigwin-3.0.12.zip > swig.zip
        unzip -o swig.zip -d swig
        echo "${{runner.workspace}}/swig/swigwin-3.0.12" >> $GITHUB_PATH
    
    - name: setup Windows environment
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
        echo RUNTIME_LINKING_OPTION="-DWITH_STATIC_RUNTIME=ON" >> "${GITHUB_ENV}"

    - name: Install Ubuntu dependencies
      if: matrix.platform == 'ubuntu-latest'
      shell: bash
      run: sudo apt-get install -y ccache
    
    - name: Install macOS dependencies
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: brew install swig ccache
      
    - name: Build libSBML
      shell: bash
      run: |
        # use RUNTIME_LINKING_OPTION, so static runtime will be selected when building libsbml
        cmake -B "${{runner.workspace}}/libsbml-build" -S "${{runner.workspace}}/libsbml" ${RUNTIME_LINKING_OPTION}
        cmake --build "${{runner.workspace}}/libsbml-build" --config $BUILD_TYPE
        
    - name: Prepare Build Environment for testsbxml on non-Windows OS
      if: matrix.platform != 'windows-latest'
      shell: bash
      run: |
        mkdir "${{runner.workspace}}/dependencies"
        mkdir "${{runner.workspace}}/dependencies/include"
        mkdir "${{runner.workspace}}/dependencies/lib"
        cp -r "${{runner.workspace}}/libsbml/src/sbml" "${{runner.workspace}}/dependencies/include"
        cp -r "${{runner.workspace}}/libsbml-build/src/sbml" "${{runner.workspace}}/dependencies/include"
        cp "${{runner.workspace}}/libsbml-build/src/"*.* "${{runner.workspace}}/dependencies/lib"
        
    - name: Prepare Build Environment for testsbxml on Windows OS
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
        mv "${{runner.workspace}}/libsbml/dependencies" "${{runner.workspace}}/dependencies"
        cp -r "${{runner.workspace}}/libsbml/src/sbml" "${{runner.workspace}}/dependencies/include"
        cp -r "${{runner.workspace}}/libsbml-build/src/sbml" "${{runner.workspace}}/dependencies/include"
        cp "${{runner.workspace}}/libsbml-build/src/Release/"*.* "${{runner.workspace}}/dependencies/lib"
        # need to add libsbml.dll directory to path, since we are linking dynamically
        echo "${{runner.workspace}}/dependencies/lib" >> $GITHUB_PATH
        
    - name: Configure ubuntu CMake
      if: matrix.platform == 'ubuntu-latest'
      shell: bash
      run: |
        cmake -B "${{runner.workspace}}/build" \
          -DLIBSBML_INCLUDE_DIR="${{runner.workspace}}/dependencies/include" \
          -DLIBSBML_LIBRARY="${{runner.workspace}}/dependencies/lib/libsbml.so" \
          -DWITH_LIBLX=False \
          -DWITH_LIBSBML=True \
          -DWITH_EXAMPLES=True \
          -DWITH_CHECK=True
          
    - name: Configure macOS CMake
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
        cmake -B "${{runner.workspace}}/build" \
          -DLIBSBML_INCLUDE_DIR="${{runner.workspace}}/dependencies/include" \
          -DLIBSBML_LIBRARY="${{runner.workspace}}/dependencies/lib/libsbml.dylib" \
          -DWITH_LIBLX=False \
          -DWITH_LIBSBML=True \
          -DWITH_EXAMPLES=True \
          -DWITH_CHECK=True
          
    - name: Configure Windows CMake
      if: matrix.platform == 'windows-latest'
      shell: bash
      run: |
        cmake -B "${{runner.workspace}}/build" \
          -DLIBSBML_INCLUDE_DIR="${{runner.workspace}}/dependencies/include" \
          -DLIBSBML_LIBRARY="${{runner.workspace}}/dependencies/lib/libsbml.lib" \
          -DLIBSBML_STATIC=True \
          -DWITH_LIBLX=False \
          -DWITH_LIBSBML=True \
          ${RUNTIME_LINKING_OPTION} \
          -DWITH_EXAMPLES=True \
          -DWITH_CHECK=True
          
    - name: Build testsbxml
      shell: bash
      run: cmake --build "${{runner.workspace}}/build" --config $BUILD_TYPE

    - name: Test testsbxml
      shell: bash
      run: ctest -V -C $BUILD_TYPE --test-dir "${{runner.workspace}}/build"
